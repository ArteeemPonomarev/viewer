import React, { useEffect, useRef, useState } from 'react';
import * as THREE from 'three';
import * as CORE from '@thatopen/components';

interface IFCViewerProps {
  file: File | null;
}

const IFCViewer: React.FC<IFCViewerProps> = () => {
  const containerRef = useRef<HTMLDivElement>(null);
  const componentsRef = useRef<CORE.Components | null>(null);
  const worldRef = useRef<CORE.World | null>(null);
  const fragmentsRef = useRef<CORE.FragmentsManager | null>(null);

  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [viewerReady, setViewerReady] = useState(false);
  const [modelsCount, setModelsCount] = useState(0);
  const [customFragPath, setCustomFragPath] = useState('');
  const [loadingProgress, setLoadingProgress] = useState({ current: 0, total: 0 });

  // 1) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
  useEffect(() => {
    if (!containerRef.current) return;

    const init = async () => {
      try {
        console.log('üöÄ [INIT] –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—å—é–µ—Ä–∞...');

        // Components (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        console.log('üîß [INIT] –°–æ–∑–¥–∞–µ–º Components...');
        const components = new CORE.Components();
        componentsRef.current = components;
        console.log('‚úÖ [INIT] Components —Å–æ–∑–¥–∞–Ω:', components);

        // Worlds (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        console.log('üåç [INIT] –°–æ–∑–¥–∞–µ–º World...');
        const worlds = components.get(CORE.Worlds);
        const world = worlds.create<
          CORE.SimpleScene,
          CORE.OrthoPerspectiveCamera,
          CORE.SimpleRenderer
        >();
        worldRef.current = world;
        console.log('‚úÖ [INIT] World —Å–æ–∑–¥–∞–Ω:', world);

        // Scene (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        console.log('üé¨ [INIT] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Scene...');
        world.scene = new CORE.SimpleScene(components);
        world.scene.setup();
        world.scene.three.background = new THREE.Color(0x1a1a1a); // –¢–µ–º–Ω—ã–π —Ñ–æ–Ω
        console.log('‚úÖ [INIT] Scene –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞:', world.scene);

        // Renderer (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        console.log('üé® [INIT] –°–æ–∑–¥–∞–µ–º Renderer...');
        world.renderer = new CORE.SimpleRenderer(components, containerRef.current!);
        console.log('‚úÖ [INIT] Renderer —Å–æ–∑–¥–∞–Ω:', world.renderer);

        // Camera (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        console.log('üì∑ [INIT] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Camera...');
        world.camera = new CORE.OrthoPerspectiveCamera(components);
        await world.camera.controls.setLookAt(78, 20, -2.2, 26, -4, 25);
        console.log('‚úÖ [INIT] Camera –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞:', world.camera);

        // Components init (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        console.log('‚öôÔ∏è [INIT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Components...');
        components.init();
        console.log('‚úÖ [INIT] Components –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');

        // Grid (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        console.log('üìê [INIT] –°–æ–∑–¥–∞–µ–º Grid...');
        components.get(CORE.Grids).create(world);
        console.log('‚úÖ [INIT] Grid —Å–æ–∑–¥–∞–Ω');

        // FragmentsManager (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        console.log('üì¶ [INIT] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FragmentsManager...');
        const githubUrl = "https://thatopen.github.io/engine_fragment/resources/worker.mjs";
        console.log('üåê [INIT] –ó–∞–≥—Ä—É–∂–∞–µ–º worker —Å:', githubUrl);
        const fetchedUrl = await fetch(githubUrl);
        const workerBlob = await fetchedUrl.blob();
        const workerFile = new File([workerBlob], "worker.mjs", {
          type: "text/javascript",
        });
        const workerUrl = URL.createObjectURL(workerFile);
        console.log('‚úÖ [INIT] Worker –∑–∞–≥—Ä—É–∂–µ–Ω, URL:', workerUrl);

        const fragments = components.get(CORE.FragmentsManager);
        console.log('üîß [INIT] FragmentsManager –ø–æ–ª—É—á–µ–Ω:', fragments);
        fragments.init(workerUrl);
        fragmentsRef.current = fragments;
        console.log('‚úÖ [INIT] FragmentsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        // Camera controls (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        console.log('üéÆ [INIT] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Camera controls...');
        world.camera.controls.addEventListener("rest", () => {
          console.log('üîÑ [CAMERA] Camera rest event triggered');
          fragments.core.update(true);
        });
        
        console.log('‚úÖ [INIT] Camera controls –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

        // Fragments list (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
        console.log('üìã [INIT] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Fragments list handlers...');
        fragments.list.onItemSet.add(({ value: model }) => {
          console.log('üì¶ [FRAGMENT] onItemSet triggered!');
          console.log('üì¶ [FRAGMENT] –ú–æ–¥–µ–ª—å:', model);
          console.log('üì¶ [FRAGMENT] model.object:', model.object);
          console.log('üì¶ [FRAGMENT] model.modelId:', model.modelId);
          
          console.log('üì∑ [FRAGMENT] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É –¥–ª—è –º–æ–¥–µ–ª–∏...');
          model.useCamera(world.camera.three);
          console.log('‚úÖ [FRAGMENT] –ö–∞–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
          
          
          console.log('üé¨ [FRAGMENT] –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –≤ —Å—Ü–µ–Ω—É...');
          world.scene.three.add(model.object);
          console.log('‚úÖ [FRAGMENT] –ú–æ–¥–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—Ü–µ–Ω—É');
          
          console.log('üîç [FRAGMENT] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ü–µ–Ω—ã:');
          console.log('üìä [FRAGMENT] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ü–µ–Ω–µ:', world.scene.three.children.length);
          console.log('üéØ [FRAGMENT] –û–±—ä–µ–∫—Ç—ã –≤ —Å—Ü–µ–Ω–µ:', world.scene.three.children.map(child => ({
            type: child.type,
            name: child.name,
            visible: child.visible,
            position: child.position,
            userData: child.userData
          })));
          
          console.log('üîÑ [FRAGMENT] –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–Ω–¥–µ—Ä...');
          fragments.core.update(true);
          console.log('‚úÖ [FRAGMENT] –†–µ–Ω–¥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω');
          
          setModelsCount(fragments.list.size);
          console.log('üìä [FRAGMENT] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π:', fragments.list.size);
          
          // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
          console.log('üß† [MEMORY] –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏:');
          if ((performance as any).memory) {
            const mem = (performance as any).memory;
            console.log('üìä [MEMORY] Used JS Heap:', Math.round(mem.usedJSHeapSize / 1024 / 1024), 'MB');
            console.log('üìä [MEMORY] Total JS Heap:', Math.round(mem.totalJSHeapSize / 1024 / 1024), 'MB');
            console.log('üìä [MEMORY] JS Heap Limit:', Math.round(mem.jsHeapSizeLimit / 1024 / 1024), 'MB');
          }
          
          // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ 3D –æ–±—ä–µ–∫—Ç–æ–≤
          let geometryCount = 0;
          let materialCount = 0;
          let totalVertices = 0;
          let totalFaces = 0;
          let totalMemoryEstimate = 0;
          
          world.scene.three.traverse((child: THREE.Object3D) => {
            if (child instanceof THREE.Mesh) {
              geometryCount++;
              
              // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
              if (child.geometry) {
                const geometry = child.geometry;
                if (geometry.attributes.position) {
                  const vertices = geometry.attributes.position.count;
                  totalVertices += vertices;
                  
                  // –û—Ü–µ–Ω–∫–∞ –ø–∞–º—è—Ç–∏: –ø–æ–∑–∏—Ü–∏–∏ (3 * 4 –±–∞–π—Ç–∞) + –Ω–æ—Ä–º–∞–ª–∏ (3 * 4 –±–∞–π—Ç–∞) + UV (2 * 4 –±–∞–π—Ç–∞)
                  const vertexMemory = vertices * (3 + 3 + 2) * 4; // –±–∞–π—Ç—ã
                  totalMemoryEstimate += vertexMemory;
                }
                
                if (geometry.index) {
                  const faces = geometry.index.count / 3;
                  totalFaces += faces;
                  
                  // –ò–Ω–¥–µ–∫—Å—ã: 3 * 2 –±–∞–π—Ç–∞ –Ω–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                  const indexMemory = geometry.index.count * 2;
                  totalMemoryEstimate += indexMemory;
                }
              }
              
              // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
              if (child.material) {
                if (Array.isArray(child.material)) {
                  materialCount += child.material.length;
                  totalMemoryEstimate += child.material.length * 1024; // ~1KB –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª
                } else {
                  materialCount++;
                  totalMemoryEstimate += 1024; // ~1KB –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª
                }
              }
            }
          });
          
          console.log('üé® [MEMORY] –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 3D:');
          console.log('  üìä –ì–µ–æ–º–µ—Ç—Ä–∏–π:', geometryCount);
          console.log('  üé≠ –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', materialCount);
          console.log('  üìê –í–µ—Ä—à–∏–Ω:', totalVertices.toLocaleString());
          console.log('  üî∫ –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤:', totalFaces.toLocaleString());
          console.log('  üíæ –û—Ü–µ–Ω–∫–∞ –ø–∞–º—è—Ç–∏ 3D:', Math.round(totalMemoryEstimate / 1024 / 1024), 'MB');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º bounding box –º–æ–¥–µ–ª–∏
          setTimeout(() => {
            console.log('üîç [FRAGMENT] –ü—Ä–æ–≤–µ—Ä—è–µ–º bounding box –º–æ–¥–µ–ª–∏...');
            const box = new THREE.Box3().setFromObject(model.object);
            console.log('üì¶ [FRAGMENT] Bounding box:', box);
            if (!box.isEmpty()) {
              const center = box.getCenter(new THREE.Vector3());
              const size = box.getSize(new THREE.Vector3());
              console.log('üìç [FRAGMENT] –¶–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏:', center);
              console.log('üìè [FRAGMENT] –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏:', size);
            } else {
              console.warn('‚ö†Ô∏è [FRAGMENT] Bounding box –ø—É—Å—Ç–æ–π!');
            }
          }, 100);
        });
        console.log('‚úÖ [INIT] Fragments list handlers –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        fragments.list.onItemDeleted.add(() => {
          console.log('üóëÔ∏è [FRAGMENT] onItemDeleted triggered');
          setModelsCount(fragments.list.size);
          console.log('üìä [FRAGMENT] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:', fragments.list.size);
        });
        console.log('‚úÖ [INIT] Fragments deletion handlers –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

        setViewerReady(true);
        console.log('‚úÖ [INIT] –í—å—é–µ—Ä –≥–æ—Ç–æ–≤!');
        console.log('üéØ [INIT] –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:');
        console.log('  - Components:', !!componentsRef.current);
        console.log('  - World:', !!worldRef.current);
        console.log('  - Fragments:', !!fragmentsRef.current);
        console.log('  - Viewer ready:', true);

      } catch (e: any) {
        console.error('‚ùå [INIT] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', e);
        console.error('‚ùå [INIT] Stack trace:', e.stack);
        setError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${e?.message ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    };

    init();
  }, []);

  // 2) –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
  const loadCustomFragment = async () => {
    if (!fragmentsRef.current || !viewerReady || !customFragPath.trim()) return;

    setIsLoading(true);
    setError(null);

    try {
      const fragments = fragmentsRef.current;
      const path = customFragPath.startsWith('/') ? customFragPath : `/fragments/${customFragPath}`;
      
      console.log('üöÄ [CUSTOM] –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç:', path);
      
      const modelId = path.split("/").pop()?.split(".").shift() || 'custom';
      console.log(`üÜî [CUSTOM] Model ID: ${modelId}`);
      
      const file = await fetch(path);
      if (!file.ok) {
        throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${path}`);
      }
      
      const buffer = await file.arrayBuffer();
      console.log(`üì¶ [CUSTOM] –ë—É—Ñ–µ—Ä –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä: ${buffer.byteLength} –±–∞–π—Ç`);
      
      const result = await fragments.core.load(buffer, { modelId });
      console.log(`‚úÖ [CUSTOM] –§—Ä–∞–≥–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:`, result);
      
      setCustomFragPath(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
      
    } catch (e: any) {
      console.error('‚ùå [CUSTOM] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞:', e);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç: ${e?.message ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setIsLoading(false);
    }
  };

  // 3) –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
  const loadFragments = async () => {
    console.log('üöÄ [LOAD] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤...');
    console.log('üîç [LOAD] –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è:');
    console.log('  - fragmentsRef.current:', !!fragmentsRef.current);
    console.log('  - viewerReady:', viewerReady);
    console.log('  - isLoading:', isLoading);
    
    if (!fragmentsRef.current || !viewerReady) {
      console.warn('‚ö†Ô∏è [LOAD] –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
      return;
    }

    setIsLoading(true);
    setError(null);
    console.log('‚è≥ [LOAD] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏');

    try {
      const fragments = fragmentsRef.current;
      console.log('üì¶ [LOAD] Fragments manager –ø–æ–ª—É—á–µ–Ω:', fragments);
      console.log('üìä [LOAD] –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π:', fragments.list.size);
      
      // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ public/fragments
      const allFragPaths = [
        "/fragments/2024-09-22 –î–æ—Ä–æ—Ö–æ–≤–∞_–¢–æ–ø–ª–∏–≤–æ.ifc.frag",
        "/fragments/2024-10-09 –î–æ—Ä–æ—Ö–æ–≤–∞ –ì–∞–∑–æ—Ö–æ–¥—ã.ifc.frag",
        "/fragments/NCBC_DC_B_AR_R24.ifc.frag",
        "/fragments/NCBC_DC_B_AUP_R24.ifc.frag",
        "/fragments/NCBC_DC_B_EOM_R24_Mazur_E.ifc.frag",
        "/fragments/NCBC_DC_B_KITSO_R24.ifc.frag",
        "/fragments/NCBC_DC_B_KR1_R24_DZ.ifc.frag",
        "/fragments/NCBC_DC_B_KR2_R24.ifc.frag",
        "/fragments/NCBC_DC_B_KR3_R24.ifc.frag",
        "/fragments/NCBC_DC_B_OV_R24.ifc.frag",
        "/fragments/NCBC_DC_B_OV2.2.ifc.frag",
        "/fragments/NCBC_DC_B_SS_R24_Mazur_E.ifc.frag",
        "/fragments/NCBC_DC_B_TS_R24.ifc.frag",
      ];
      
             // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Å—Ä–∞–∑—É
             const fragPaths = allFragPaths;
             console.log('üìã [LOAD] –ü—É—Ç–∏ –∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º (–≤—Å–µ', fragPaths.length, '):', fragPaths);

             console.log('üîÑ [LOAD] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ...');
             setLoadingProgress({ current: 0, total: fragPaths.length });
             
             // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
             const results = await Promise.all(fragPaths.map(async (path, i) => {
               console.log(`üì• [LOAD-${i}] –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç: ${path}`);

               const modelId = path.split("/").pop()?.split(".").shift();
               console.log(`üÜî [LOAD-${i}] Model ID: ${modelId}`);

               if (!modelId) {
                 console.warn(`‚ö†Ô∏è [LOAD-${i}] Model ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${path}`);
                 return null;
               }

               console.log(`üåê [LOAD-${i}] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª...`);
               const file = await fetch(path);
               console.log(`üì° [LOAD-${i}] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:`, file.status, file.statusText);

               const buffer = await file.arrayBuffer();
               console.log(`üì¶ [LOAD-${i}] –ë—É—Ñ–µ—Ä –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä: ${buffer.byteLength} –±–∞–π—Ç`);

               console.log(`üîÑ [LOAD-${i}] –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ fragments.core...`);
               // this is the main function to load the fragments (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
               const result = await fragments.core.load(buffer, { modelId });
               console.log(`‚úÖ [LOAD-${i}] –§—Ä–∞–≥–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:`, result);
               console.log(`üìä [LOAD-${i}] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: ${fragments.list.size}`);

               // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
               if ((performance as any).memory) {
                 const mem = (performance as any).memory;
                 console.log(`üß† [MEMORY-${i}] Used JS Heap:`, Math.round(mem.usedJSHeapSize / 1024 / 1024), 'MB');
               }

               // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
               setLoadingProgress({ current: i + 1, total: fragPaths.length });

               return result;
             }));
      
      console.log('‚úÖ [LOAD] –í—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìä [LOAD] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:', results);
      console.log('üìä [LOAD] –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π:', fragments.list.size);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      if (worldRef.current) {
        console.log('üîç [LOAD] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:');
        console.log('üìä [LOAD] –û–±—ä–µ–∫—Ç—ã –≤ —Å—Ü–µ–Ω–µ:', worldRef.current.scene.three.children.length);
        console.log('üéØ [LOAD] –î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤:', worldRef.current.scene.three.children.map(child => ({
          type: child.type,
          name: child.name,
          visible: child.visible,
          position: child.position,
          userData: child.userData
        })));
      }

    } catch (e: any) {
      console.error('‚ùå [LOAD] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤:', e);
      console.error('‚ùå [LOAD] Stack trace:', e.stack);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã: ${e?.message ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setIsLoading(false);
      console.log('‚èπÔ∏è [LOAD] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏');
    }
  };

  // 3) –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
  const downloadFragments = async () => {
    if (!fragmentsRef.current) return;

    try {
      const fragments = fragmentsRef.current;
      
      for (const [, model] of fragments.list) {
        const fragsBuffer = await model.getBuffer(false);
        const file = new File([fragsBuffer], `${model.modelId}.frag`);
        const link = document.createElement("a");
        link.href = URL.createObjectURL(file);
        link.download = file.name;
        link.click();
        URL.revokeObjectURL(link.href);
      }
      
    } catch (e: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤:', e);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã: ${e?.message ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };

  // 4) –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π –º–æ–¥–µ–ª–∏ (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
  const deleteArchModel = () => {
    if (!fragmentsRef.current) return;
    
    const fragments = fragmentsRef.current;
    const modelIds = [...fragments.list.keys()];
    const modelId = modelIds.find((key) => /arq/.test(key));
    if (!modelId) return;
    fragments.core.disposeModel(modelId);
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –º–æ–¥–µ–ª—å: ${modelId}`);
  };

  // 5) –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏
  const analyzeMemory = () => {
    console.log('üîç [ANALYZE] –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏...');
    
    if (!worldRef.current) {
      console.warn('‚ö†Ô∏è [ANALYZE] World –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }
    
    const world = worldRef.current;
    let totalVertices = 0;
    let totalFaces = 0;
    let geometryCount = 0;
    let materialCount = 0;
    let textureCount = 0;
    let totalMemoryEstimate = 0;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ü–µ–Ω–µ
    world.scene.three.traverse((child: THREE.Object3D) => {
      if (child instanceof THREE.Mesh) {
        geometryCount++;
        
        // –ì–µ–æ–º–µ—Ç—Ä–∏—è
        if (child.geometry) {
          const geometry = child.geometry;
          
          // –í–µ—Ä—à–∏–Ω—ã
          if (geometry.attributes.position) {
            const vertices = geometry.attributes.position.count;
            totalVertices += vertices;
            totalMemoryEstimate += vertices * 8 * 4; // –ø–æ–∑–∏—Ü–∏–∏ + –Ω–æ—Ä–º–∞–ª–∏ + UV
          }
          
          // –ò–Ω–¥–µ–∫—Å—ã
          if (geometry.index) {
            const faces = geometry.index.count / 3;
            totalFaces += faces;
            totalMemoryEstimate += geometry.index.count * 2;
          }
        }
        
        // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
        if (child.material) {
          if (Array.isArray(child.material)) {
            materialCount += child.material.length;
            child.material.forEach(mat => {
              totalMemoryEstimate += 2048; // ~2KB –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª
              
              // –¢–µ–∫—Å—Ç—É—Ä—ã –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
              if (mat.map) textureCount++;
              if (mat.normalMap) textureCount++;
              if (mat.roughnessMap) textureCount++;
              if (mat.metalnessMap) textureCount++;
            });
          } else {
            materialCount++;
            totalMemoryEstimate += 2048;
            
            if (child.material.map) textureCount++;
            if (child.material.normalMap) textureCount++;
            if (child.material.roughnessMap) textureCount++;
            if (child.material.metalnessMap) textureCount++;
          }
        }
      }
    });
    
    // –û—Ü–µ–Ω–∫–∞ –ø–∞–º—è—Ç–∏ —Ç–µ–∫—Å—Ç—É—Ä
    const textureMemory = textureCount * 1024 * 1024; // ~1MB –Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä—É
    totalMemoryEstimate += textureMemory;
    
    console.log('üìä [ANALYZE] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:');
    console.log('  üéØ –ì–µ–æ–º–µ—Ç—Ä–∏–π:', geometryCount);
    console.log('  üé≠ –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', materialCount);
    console.log('  üñºÔ∏è –¢–µ–∫—Å—Ç—É—Ä:', textureCount);
    console.log('  üìê –í–µ—Ä—à–∏–Ω:', totalVertices.toLocaleString());
    console.log('  üî∫ –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤:', totalFaces.toLocaleString());
    console.log('  üíæ –û—Ü–µ–Ω–∫–∞ –ø–∞–º—è—Ç–∏ 3D:', Math.round(totalMemoryEstimate / 1024 / 1024), 'MB');
    console.log('  üñºÔ∏è –ü–∞–º—è—Ç—å —Ç–µ–∫—Å—Ç—É—Ä:', Math.round(textureMemory / 1024 / 1024), 'MB');
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç—å—é
    if ((performance as any).memory) {
      const mem = (performance as any).memory;
      const realMemory = mem.usedJSHeapSize;
      const estimatedMemory = totalMemoryEstimate;
      const ratio = realMemory / estimatedMemory;
      
      console.log('üìà [ANALYZE] –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:');
      console.log('  üî¥ –†–µ–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å:', Math.round(realMemory / 1024 / 1024), 'MB');
      console.log('  üîµ –û—Ü–µ–Ω–∫–∞ 3D:', Math.round(estimatedMemory / 1024 / 1024), 'MB');
      console.log('  üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:', ratio.toFixed(2));
      
      if (ratio > 3) {
        console.warn('‚ö†Ô∏è [ANALYZE] –ü–∞–º—è—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –≤', ratio.toFixed(1), '—Ä–∞–∑! –í–æ–∑–º–æ–∂–Ω—ã —É—Ç–µ—á–∫–∏.');
      }
    }
  };

  // 6) –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
  const deleteAllModels = () => {
    console.log('üóëÔ∏è [DELETE] –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π...');
    console.log('üîç [DELETE] –ü—Ä–æ–≤–µ—Ä—è–µ–º fragmentsRef.current:', !!fragmentsRef.current);
    
    if (!fragmentsRef.current) {
      console.warn('‚ö†Ô∏è [DELETE] fragmentsRef.current –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ');
      return;
    }
    
    const fragments = fragmentsRef.current;
    console.log('üìä [DELETE] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –¥–æ —É–¥–∞–ª–µ–Ω–∏—è:', fragments.list.size);
    console.log('üìã [DELETE] ID –º–æ–¥–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', [...fragments.list.keys()]);
    
    for (const [modelId] of fragments.list) {
      console.log(`üóëÔ∏è [DELETE] –£–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å: ${modelId}`);
      fragments.core.disposeModel(modelId);
    }
    
    console.log('‚úÖ [DELETE] –í—Å–µ –º–æ–¥–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã');
    console.log('üìä [DELETE] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:', fragments.list.size);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    if (worldRef.current) {
      console.log('üîç [DELETE] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:');
      console.log('üìä [DELETE] –û–±—ä–µ–∫—Ç—ã –≤ —Å—Ü–µ–Ω–µ:', worldRef.current.scene.three.children.length);
    }
  };


  return (
    <div className="ifc-viewer" style={{ 
      position: 'relative', 
      width: '100vw', 
      height: '100vh', 
      margin: 0, 
      padding: 0,
      overflow: 'hidden'
    }}>
      {/* 3D –°—Ü–µ–Ω–∞ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω */}
      <div
        ref={containerRef}
        className="viewer-container"
        style={{
          position: 'absolute',
          top: '32px',
          left: '32px',
          right: '32px',
          bottom: '32px',
          zIndex: 1
        }}
      />

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö —Å—Ü–µ–Ω—ã */}
      <div style={{
        position: 'absolute',
        top: '20px',
        left: '20px',
        zIndex: 10,
        background: 'rgba(255, 255, 255, 0.95)',
        padding: '15px',
        borderRadius: '8px',
        boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
        backdropFilter: 'blur(10px)',
        minWidth: '300px'
      }}>
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö */}
               <div style={{
                 marginBottom: '15px',
                 fontSize: '16px',
                 color: '#333',
                 fontWeight: '500'
               }}>
                 –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: <strong style={{ color: '#007bff' }}>{modelsCount}</strong>
               </div>

        
        {/* –ü–æ–ª–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ */}
        <div style={{ 
          marginBottom: '15px', 
          display: 'flex', 
          gap: '10px', 
          alignItems: 'center',
          flexWrap: 'wrap'
        }}>
          <input
            type="text"
            value={customFragPath}
            onChange={(e) => setCustomFragPath(e.target.value)}
            placeholder="–ò–º—è —Ñ–∞–π–ª–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: my_model.frag)"
            style={{
              flex: 1,
              minWidth: '200px',
              padding: '10px 12px',
              border: '1px solid #ddd',
              borderRadius: '6px',
              fontSize: '14px',
              outline: 'none',
              transition: 'border-color 0.2s ease'
            }}
            onFocus={(e) => e.target.style.borderColor = '#007bff'}
            onBlur={(e) => e.target.style.borderColor = '#ddd'}
          />
          <button
            onClick={loadCustomFragment}
            disabled={isLoading || !customFragPath.trim()}
            style={{
              padding: '10px 16px',
              backgroundColor: (!isLoading && customFragPath.trim()) ? '#17a2b8' : '#ccc',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              cursor: (!isLoading && customFragPath.trim()) ? 'pointer' : 'not-allowed',
              fontSize: '14px',
              fontWeight: '500',
              transition: 'all 0.2s ease',
              whiteSpace: 'nowrap'
            }}
          >
            üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å
          </button>
        </div>
        
        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>
          {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –º–æ–¥–µ–ª–µ–π */}
          {modelsCount === 0 && (
            <button
              onClick={() => {
                console.log('üñ±Ô∏è [BUTTON] –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã" –Ω–∞–∂–∞—Ç–∞');
                console.log('üîç [BUTTON] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π:');
                console.log('  - modelsCount:', modelsCount);
                console.log('  - isLoading:', isLoading);
                console.log('  - viewerReady:', viewerReady);
                console.log('  - fragmentsRef.current:', !!fragmentsRef.current);
                loadFragments();
              }}
              disabled={isLoading}
              style={{
                padding: '12px 20px',
                backgroundColor: !isLoading ? '#28a745' : '#ccc',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: !isLoading ? 'pointer' : 'not-allowed',
                fontSize: '14px',
                fontWeight: '500',
                transition: 'all 0.2s ease',
                boxShadow: !isLoading ? '0 2px 8px rgba(40, 167, 69, 0.3)' : 'none'
              }}
              onMouseEnter={(e) => {
                if (!isLoading) {
                  e.currentTarget.style.transform = 'translateY(-1px)';
                  e.currentTarget.style.boxShadow = '0 4px 12px rgba(40, 167, 69, 0.4)';
                }
              }}
              onMouseLeave={(e) => {
                if (!isLoading) {
                  e.currentTarget.style.transform = 'translateY(0)';
                  e.currentTarget.style.boxShadow = '0 2px 8px rgba(40, 167, 69, 0.3)';
                }
              }}
            >
              {isLoading ? '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...' : 'üì¶ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã'}
            </button>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π –º–æ–¥–µ–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å arq –º–æ–¥–µ–ª—å */}
          {modelsCount > 0 && fragmentsRef.current && (() => {
            const fragments = fragmentsRef.current!;
            const hasArchModel = [...fragments.list.keys()].some((key) => /arq/.test(key));
            return hasArchModel;
          })() && (
            <button
              onClick={deleteArchModel}
              disabled={isLoading}
              style={{
                padding: '12px 20px',
                backgroundColor: !isLoading ? '#dc3545' : '#ccc',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: !isLoading ? 'pointer' : 'not-allowed',
                fontSize: '14px',
                fontWeight: '500',
                transition: 'all 0.2s ease',
                boxShadow: !isLoading ? '0 2px 8px rgba(220, 53, 69, 0.3)' : 'none'
              }}
              onMouseEnter={(e) => {
                if (!isLoading) {
                  e.currentTarget.style.transform = 'translateY(-1px)';
                  e.currentTarget.style.boxShadow = '0 4px 12px rgba(220, 53, 69, 0.4)';
                }
              }}
              onMouseLeave={(e) => {
                if (!isLoading) {
                  e.currentTarget.style.transform = 'translateY(0)';
                  e.currentTarget.style.boxShadow = '0 2px 8px rgba(220, 53, 69, 0.3)';
                }
              }}
            >
              üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—É—é –º–æ–¥–µ–ª—å
            </button>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π */}
          {modelsCount > 0 && (
            <>
              <button
                onClick={downloadFragments}
                disabled={isLoading}
                style={{
                  padding: '12px 20px',
                  backgroundColor: !isLoading ? '#ffc107' : '#ccc',
                  color: 'black',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: !isLoading ? 'pointer' : 'not-allowed',
                  fontSize: '14px',
                  fontWeight: '500',
                  transition: 'all 0.2s ease',
                  boxShadow: !isLoading ? '0 2px 8px rgba(255, 193, 7, 0.3)' : 'none'
                }}
                onMouseEnter={(e) => {
                  if (!isLoading) {
                    e.currentTarget.style.transform = 'translateY(-1px)';
                    e.currentTarget.style.boxShadow = '0 4px 12px rgba(255, 193, 7, 0.4)';
                  }
                }}
                onMouseLeave={(e) => {
                  if (!isLoading) {
                    e.currentTarget.style.transform = 'translateY(0)';
                    e.currentTarget.style.boxShadow = '0 2px 8px rgba(255, 193, 7, 0.3)';
                  }
                }}
              >
                üíæ –°–∫–∞—á–∞—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
              </button>
              
              <button
                onClick={analyzeMemory}
                disabled={isLoading}
                style={{
                  padding: '12px 20px',
                  backgroundColor: !isLoading ? '#17a2b8' : '#ccc',
                  color: 'white',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: !isLoading ? 'pointer' : 'not-allowed',
                  fontSize: '14px',
                  fontWeight: '500',
                  transition: 'all 0.2s ease',
                  boxShadow: !isLoading ? '0 2px 8px rgba(23, 162, 184, 0.3)' : 'none'
                }}
                onMouseEnter={(e) => {
                  if (!isLoading) {
                    e.currentTarget.style.transform = 'translateY(-1px)';
                    e.currentTarget.style.boxShadow = '0 4px 12px rgba(23, 162, 184, 0.4)';
                  }
                }}
                onMouseLeave={(e) => {
                  if (!isLoading) {
                    e.currentTarget.style.transform = 'translateY(0)';
                    e.currentTarget.style.boxShadow = '0 2px 8px rgba(23, 162, 184, 0.3)';
                  }
                }}
              >
                üîç –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏
              </button>
              
              <button
                onClick={() => {
                  console.log('üñ±Ô∏è [BUTTON] –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏" –Ω–∞–∂–∞—Ç–∞');
                  console.log('üîç [BUTTON] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º:');
                  console.log('  - modelsCount:', modelsCount);
                  console.log('  - fragmentsRef.current:', !!fragmentsRef.current);
                  if (fragmentsRef.current) {
                    console.log('  - fragments.list.size:', fragmentsRef.current.list.size);
                  }
                  deleteAllModels();
                }}
                disabled={isLoading}
                style={{
                  padding: '12px 20px',
                  backgroundColor: !isLoading ? '#dc3545' : '#ccc',
                  color: 'white',
                  border: 'none',
                  borderRadius: '6px',
                  cursor: !isLoading ? 'pointer' : 'not-allowed',
                  fontSize: '14px',
                  fontWeight: '500',
                  transition: 'all 0.2s ease',
                  boxShadow: !isLoading ? '0 2px 8px rgba(220, 53, 69, 0.3)' : 'none'
                }}
                onMouseEnter={(e) => {
                  if (!isLoading) {
                    e.currentTarget.style.transform = 'translateY(-1px)';
                    e.currentTarget.style.boxShadow = '0 4px 12px rgba(220, 53, 69, 0.4)';
                  }
                }}
                onMouseLeave={(e) => {
                  if (!isLoading) {
                    e.currentTarget.style.transform = 'translateY(0)';
                    e.currentTarget.style.boxShadow = '0 2px 8px rgba(220, 53, 69, 0.3)';
                  }
                }}
              >
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏
              </button>
            </>
          )}
        </div>
      </div>

             {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º */}
             {isLoading && (
               <div style={{
                 position: 'absolute',
                 top: '50%',
                 left: '50%',
                 transform: 'translate(-50%, -50%)',
                 zIndex: 20,
                 padding: '30px 40px',
                 backgroundColor: 'rgba(0, 0, 0, 0.9)',
                 color: 'white',
                 borderRadius: '12px',
                 fontSize: '18px',
                 fontWeight: '500',
                 boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',
                 backdropFilter: 'blur(10px)',
                 border: '1px solid rgba(255, 255, 255, 0.1)',
                 minWidth: '300px'
               }}>
                 <div style={{ marginBottom: '20px', textAlign: 'center' }}>
                   ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤...
                 </div>
                 
                 {loadingProgress.total > 0 && (
                   <div>
                     <div style={{
                       display: 'flex',
                       justifyContent: 'space-between',
                       marginBottom: '10px',
                       fontSize: '14px'
                     }}>
                       <span>–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
                       <span>{loadingProgress.current} / {loadingProgress.total}</span>
                     </div>
                     
                     <div style={{
          width: '100%',
                       height: '8px',
                       backgroundColor: 'rgba(255, 255, 255, 0.2)',
          borderRadius: '4px',
          overflow: 'hidden'
                     }}>
                       <div style={{
                         width: `${(loadingProgress.current / loadingProgress.total) * 100}%`,
                         height: '100%',
                         backgroundColor: '#007bff',
                         transition: 'width 0.3s ease'
                       }} />
                     </div>
                     
                     <div style={{
                       marginTop: '10px',
                       fontSize: '12px',
                       textAlign: 'center',
                       color: 'rgba(255, 255, 255, 0.7)'
                     }}>
                       {Math.round((loadingProgress.current / loadingProgress.total) * 100)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                     </div>
                   </div>
                 )}
               </div>
             )}

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
      {error && (
        <div style={{
          position: 'absolute',
          bottom: '20px',
          left: '20px',
          right: '20px',
          zIndex: 10,
          padding: '15px 20px',
          backgroundColor: 'rgba(248, 215, 218, 0.95)',
          color: '#721c24',
          border: '1px solid #f5c6cb',
          borderRadius: '8px',
          fontSize: '14px',
          fontWeight: '500',
          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
          backdropFilter: 'blur(10px)'
        }}>
          ‚ùå {error}
        </div>
      )}

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—å—é–µ—Ä–∞ */}
      {!viewerReady && (
        <div style={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          zIndex: 20,
          padding: '30px 40px',
          backgroundColor: 'rgba(240, 240, 240, 0.95)',
          color: '#666',
          borderRadius: '12px',
          fontSize: '18px',
          fontWeight: '500',
          textAlign: 'center',
          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
          backdropFilter: 'blur(10px)',
          border: '1px solid rgba(0, 0, 0, 0.1)'
        }}>
          üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—å—é–µ—Ä–∞...
        </div>
      )}
    </div>
  );
};

export default IFCViewer;